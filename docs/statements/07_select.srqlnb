[{"kind":1,"language":"markdown","value":"# `SELECT` statement\r\n\r\nThe `SELECT` statement can be used for selecting and querying data in a database. Each `SELECT` statement supports selecting from multiple targets, which can include tables, records, edges, subqueries, paramaters, arrays, objects, and other values."},{"kind":1,"language":"markdown","value":"## Statement syntax\r\n\r\n```surrealql\r\nSELECT @projections\r\n\tFROM @targets\r\n\t[ WHERE @condition ]\r\n\t[ SPLIT [ AT ] @field ... ]\r\n\t[ GROUP [ BY ] @field ... ]\r\n\t[ ORDER [ BY ]\r\n\t\t@field [\r\n\t\t\tRAND()\r\n\t\t\t| COLLATE\r\n\t\t\t| NUMERIC\r\n\t\t] [ ASC | DESC ] ...\r\n\t] ]\r\n\t[ LIMIT [ BY ] @limit ]\r\n\t[ START [ AT ] @start ]\r\n\t[ FETCH @field ... ]\r\n\t[ TIMEOUT @duration ]\r\n\t[ PARALLEL ]\r\n;\r\n```"},{"kind":1,"language":"markdown","value":"## Example usage\r\n\r\nThe following query shows example usage of this statement."},{"kind":2,"language":"surrealql","value":"SELECT age, name, email FROM user;"},{"kind":1,"language":"markdown","value":"SELECT queries support advanced expression in the field projections."},{"kind":2,"language":"surrealql","value":"-- Use an expression as an alias\r\nSELECT age >= 18 AS adult FROM user;\r\n\r\n-- Select nested array values only\r\nSELECT *, tags.*.value AS tags FROM article;\r\n\r\n-- Select filtered nested array values\r\nSELECT addresses[WHERE active = true] FROM customer;\r\n\r\n-- Select a remote field from connected out graph edges\r\nSELECT ->like->friend.name AS friends FROM person:tobie;\r\n\r\n-- Use mathematical calculations in a select expression\r\nSELECT ( ( celsius * 2 ) + 30 ) AS fahrenheit FROM temperatue;\r\n\r\n-- Select manually generated object structure\r\nSELECT { weekly: false, monthly: true } AS `marketing settings` FROM user;\r\n\r\n-- Use the result of a subquery as a returned field\r\nSELECT *, (SELECT * FROM events WHERE type = 'activity' LIMIT 5) AS history FROM user;"},{"kind":1,"language":"markdown","value":"SurrealDB supports selecting from multiple targets including tables, records, edges, parameters, subqueries, arrays, objects, values."},{"kind":2,"language":"surrealql","value":"-- Select from multiple tables\r\nSELECT * FROM user, admin;\r\n\r\n-- Select data from a parameter\r\nSELECT * FROM $parameter WHERE admin = true;\r\n\r\n-- Select from multiple specific records\r\nSELECT * FROM user:tobie, user:jaime, company:surrealdb;\r\n\r\n-- Select from an array of values and records\r\nSELECT * FROM [3648937, \"test\", person:lrym5gur8hzws72ux5fa, person:4luro9170uwcv1xrfvby];\r\n\r\n-- Select from an object with nested values\r\nSELECT * FROM { person: person:lrym5gur8hzws72ux5fa, embedded: true };\r\n\r\n-- Select and filter records from a subquery\r\nSELECT * FROM (SELECT age >= 18 AS adult FROM user) WHERE adult = true;"},{"kind":1,"language":"markdown","value":"As with traditional SQL queries, the SurrealDB `SELECT` queries support conditional filtering using a `WHERE` clause. If the expression in the `WHERE` clause evaluates to true, then the respective record will be returned."},{"kind":2,"language":"surrealql","value":"-- Simple conditional filtering\r\nSELECT * FROM article WHERE published = true;\r\n\r\n-- Conditional filtering based on graph edges\r\nSELECT * FROM profile WHERE count(->experience->organisation) > 3;\r\n\r\n-- Conditional filtering with boolean logic\r\nSELECT * FROM user WHERE (admin AND active) OR owner = true;"},{"kind":1,"language":"markdown","value":"As SurrealDB supports arrays and nested fields within arrays, it is possible to split the result on a specific field name, returning each value in an array as a separate value, along with the record content itself. This is useful in data analysis contexts."},{"kind":2,"language":"surrealql","value":"-- Split the results by each value in an array\r\nSELECT * FROM user SPLIT emails;\r\n\r\n-- Split the results by each value in a nested array\r\nSELECT * FROM country SPLIT locations.cities;"},{"kind":1,"language":"markdown","value":"SurrealDB supports data aggregation and grouping, with support for multiple fields, nested fields, and aggregate functions. In SurrealDB, every field which appears in the field projections of the select statement (and which is not an aggregate function), must also be present in the `GROUP BY` clause."},{"kind":2,"language":"surrealql","value":"-- Group records by a single field\r\nSELECT country FROM user GROUP BY country;\r\n\r\n-- Group results by a nested field\r\nSELECT settings.published FROM article GROUP BY settings.published;\r\n\r\n-- Group results by multiple fields\r\nSELECT gender, country, city FROM person GROUP BY gender, country, city;\r\n\r\n-- Group results with aggregate functions\r\nSELECT count(*) AS total, math::sum(age), gender, country FROM person GROUP BY gender, country;"},{"kind":1,"language":"markdown","value":"To sort records, SurrealDB allows ordering on multiple fields and nested fields. Use the `ORDER BY` clause to specify a comma-separated list of field names which should be used to order the resulting records. The `ASC` and `DESC` keywords can be used to specify whether results should be sorted in an ascending or descending manner. The `COLLATE` keyword can be used to use unicode collation when ordering text in string values, ensuring that different cases, and different languages are sorted in a consistent manner. Finally the `NUMERIC` can be used to correctly sort text which contains numeric values."},{"kind":2,"language":"surrealql","value":"-- Order records randomly\r\nSELECT * FROM user ORDER BY RAND();\r\n\r\n-- Order records descending by a single field\r\nSELECT * FROM song ORDER BY rating DESC;\r\n\r\n-- Order records by multiple fields independently\r\nSELECT * FROM song ORDER By artist ASC, rating DESC;\r\n\r\n-- Order text fields with unicode collation\r\nSELECT * FROM article ORDER BY title COLLATE ASC;\r\n\r\n-- Order text fields with which include numeric values\r\nSELECT * FROM article ORDER BY title NUMERIC ASC;"},{"kind":1,"language":"markdown","value":"To limit the number of records returned, use the `LIMIT` clause."},{"kind":2,"language":"surrealql","value":"SELECT * FROM user LIMIT 50;"},{"kind":1,"language":"markdown","value":"One of the most powerful functions in SurrealDB is the related records and graph connections. Instead of pulling data from multiple tables and merging that data together, SurrealDB allows you to traverse related records efficiently without needing to use `JOIN`s. To fetch and replace records with the remote record data, use the `FETCH` clause to specify the fields and nested fields which should be fetched in-place, and returned in the final statement response output."},{"kind":2,"language":"surrealql","value":"SELECT * FROM user:tobie FETCH account, account.users;"},{"kind":1,"language":"markdown","value":"When processing a large result set with many interconnected records, it is possible to use the `TIMEOUT` keyword to specify a timeout duration for the statement. If the statement continues beyond this duration, then the transaction will fail, and the statement will return an error."},{"kind":2,"language":"surrealql","value":"SELECT * FROM person WHERE ->knows->person->(knows WHERE influencer = true) TIMEOUT 5s;"},{"kind":1,"language":"markdown","value":"When processing a large result set with many interconnected records, it is possible to specify the `PARALLEL` keyword to signify that edges and remote records should be fetched and processed in parallel."},{"kind":2,"language":"surrealql","value":"SELECT ->purchased->product<-purchased<-person->purchased->product FROM person:tobie PARALLEL;"}]