[{"kind":1,"language":"markdown","value":"# Examples for permissons, scopes"},{"kind":1,"language":"markdown","value":"1. So scopes are defined on the database level, but the authentication parameters (available once a user is signed in to a scope), are made available everywhere.\r\n"},{"kind":2,"language":"surrealql","value":"DEFINE SCOPE account SESSION 24h\r\n  SIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )\r\n  SIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )\r\n;"},{"kind":1,"language":"markdown","value":"Then you can use the authentication variables in TABLE / FIELD permissions..."},{"kind":2,"language":"surrealql","value":"DEFINE FIELD account ON TABLE note\r\n  PERMISSIONS\r\n    FOR create, update, select, delete\r\n      WHERE account = $auth.account -- The user can only access/modify notes, if the account matches the account they belong to\r\n;"},{"kind":1,"language":"markdown","value":"With 1.0.0-beta.8 with the new $token variables that you know about..."},{"kind":2,"language":"surrealql","value":"DEFINE SCOPE account;\r\nDEFINE TOKEN my_token ON SCOPE account TYPE HS512 VALUE \"my_secret_encryption_key\";"},{"kind":1,"language":"markdown","value":"Then we could generate a JWT with the following information...\r\n```json\r\n{\r\n  \"iss\": \"Auth0\",\r\n  \"account\": \"account:ajd82kvn48vl2m3\",\r\n  \"exp\": 1516239022,\r\n  \"NS\": \"my_ns\",\r\n  \"DB\": \"my_db\",\r\n  \"SC\": \"account\",\r\n  \"TK\": \"my_token\",\r\n  \"ID\": \"user:10fnvk20r8vn20eiv\"\r\n}\r\n```\r\nThen you can use the token or the auth variable in permissions clauses..."},{"kind":2,"language":"surrealql","value":"DEFINE FIELD account ON TABLE note\r\n  PERMISSIONS\r\n    FOR create, update, select, delete\r\n      WHERE account = $token.account -- Where the account field of the JWT (which is a record id) matches the account field of the document\r\n      OR account = $auth.account -- Where the account field of the logged in user (taken from the ID field on the JWT) matches the account field of the document\r\n;"},{"kind":1,"language":"markdown","value":"To answer your second question, it's flexible as to how you use scopes. You could have a 'permissions' object on each user account which specifies what a user could do, and then you could check that on each of the permissions clauses, or you could segregate different user types (admins / users) into separate scopes.\r\nIn our recruitment CRM product we use 2 scopes...\r\n1. account - for people logging in to the system as a user of the CRM\r\n2. contact - for people logging on to the system who can only see+manage their own data (as an applicant)\r\nA permissions clause of the 'contact' table looks like this..."},{"kind":2,"language":"surrealql","value":"DEFINE TABLE contact SCHEMAFULL\r\n  PERMISSIONS\r\n    FOR select\r\n        WHERE ($scope = \"account\" AND account = $account AND (SELECT * FROM $auth.access WHERE account = $account AND (admin = true OR permissions.crm ∋ \"s\") LIMIT 1))\r\n        OR ($scope = \"contact\" AND id = $auth.id)\r\n        OR ($scope = \"contact\" AND distinct(applications.*.campaign.*.connections.*.contact) ∋ $auth.id)\r\n        OR ($scope = \"contact\" AND distinct(connections.*.campaign.*.connections.*.contact) ∋ $auth.id)\r\n    FOR create\r\n        WHERE ($scope = \"account\" AND account = $account AND (SELECT * FROM $auth.access WHERE account = $account AND (admin = true OR permissions.crm ∋ \"c\") LIMIT 1))\r\n    FOR update\r\n        WHERE ($scope = \"account\" AND account = $account AND (SELECT * FROM $auth.access WHERE account = $account AND (admin = true OR permissions.crm ∋ \"u\") LIMIT 1))\r\n        OR ($scope = \"contact\" AND id = $auth.id)\r\n        OR ($scope = \"contact\" AND distinct(applications.*.campaign.*.connections.*.contact) ∋ $auth.id)\r\n    FOR delete\r\n        WHERE ($scope = \"account\" AND account = $account AND (SELECT * FROM $auth.access WHERE account = $account AND (admin = true OR permissions.crm ∋ \"d\") LIMIT 1))"}]